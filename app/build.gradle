apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.juliensacre.androidarchicomponentimpl"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    implementation 'com.android.support:design:27.1.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    ///////  LIFE  CYCLE   ////////
    def lifecycle_version = "2.0.0-alpha1"

    // ViewModel and LiveData  -> AndroidX version have compilation error, want SDK 28 (alpha now)
    implementation 'android.arch.lifecycle:extensions:1.1.1'

    // alternatively - just ViewModel

    //implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version" // use -ktx for Kotlin

    // alternatively - just LiveData

    //implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"

    // alternatively - Lifecycles only (no ViewModel or LiveData). Some UI

    //     AndroidX libraries use this lightweight import for Lifecycle

    //implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"

    //For annotation

    //annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"

    // alternately - if using Java8, use the following instead of lifecycle-compiler

    //implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // optional - ReactiveStreams support for LiveData

    //implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version" // use -ktx for Kotlin

    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:$lifecycle_version"

    ///////////////////////////////

    ///////  ROOM   ////////
    def room_version = "2.0.0-alpha1"

    //AndroidX version have compilation error, want SDK 28 (alpha now)
    implementation 'android.arch.persistence.room:runtime:1.1.0'
    annotationProcessor "androidx.room:room-compiler:$room_version"

    // optional - RxJava support for Room
    implementation 'android.arch.persistence.room:rxjava2:1.1.0'

    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation 'android.arch.persistence.room:guava:1.1.0'

    // Test helpers
    testImplementation "androidx.room:room-testing:$room_version"

    ///////////////////////////////

    ///////  PAGING  -> it easier for you to load data gradually and gracefully within your app's RecyclerView. (DB or network)   ////////
    def paging_version = "2.0.0-alpha1"

    //AndroidX version have compilation error, want SDK 28 (alpha now)
    implementation 'android.arch.paging:runtime:1.0.0'

    // alternatively - without Android dependencies for testing

    //testImplementation "androidx.paging:paging-common:$paging_version"

    // optional - RxJava support
    implementation "androidx.paging:paging-rxjava2:$paging_version"

    ///////////////////////////////
}
